

Terminals which are not used:

   ELSE
   WHILE
   BREAK


Conflict in state 66 between rule 15 and token PLUS resolved as reduce.
Conflict in state 66 between rule 15 and token MINUS resolved as reduce.
Conflict in state 66 between rule 15 and token TIMES resolved as shift.
Conflict in state 66 between rule 15 and token DIVIDE resolved as shift.
Conflict in state 66 between rule 15 and token EQ resolved as reduce.
Conflict in state 66 between rule 15 and token NEQ resolved as reduce.
Conflict in state 66 between rule 15 and token LT resolved as reduce.
Conflict in state 66 between rule 15 and token LE resolved as reduce.
Conflict in state 66 between rule 15 and token GT resolved as reduce.
Conflict in state 66 between rule 15 and token GE resolved as reduce.
Conflict in state 66 between rule 15 and token AND resolved as reduce.
Conflict in state 66 between rule 15 and token OR resolved as reduce.
Conflict in state 67 between rule 16 and token PLUS resolved as reduce.
Conflict in state 67 between rule 16 and token MINUS resolved as reduce.
Conflict in state 67 between rule 16 and token TIMES resolved as shift.
Conflict in state 67 between rule 16 and token DIVIDE resolved as shift.
Conflict in state 67 between rule 16 and token EQ resolved as reduce.
Conflict in state 67 between rule 16 and token NEQ resolved as reduce.
Conflict in state 67 between rule 16 and token LT resolved as reduce.
Conflict in state 67 between rule 16 and token LE resolved as reduce.
Conflict in state 67 between rule 16 and token GT resolved as reduce.
Conflict in state 67 between rule 16 and token GE resolved as reduce.
Conflict in state 67 between rule 16 and token AND resolved as reduce.
Conflict in state 67 between rule 16 and token OR resolved as reduce.
Conflict in state 68 between rule 17 and token PLUS resolved as reduce.
Conflict in state 68 between rule 17 and token MINUS resolved as reduce.
Conflict in state 68 between rule 17 and token TIMES resolved as reduce.
Conflict in state 68 between rule 17 and token DIVIDE resolved as reduce.
Conflict in state 68 between rule 17 and token EQ resolved as reduce.
Conflict in state 68 between rule 17 and token NEQ resolved as reduce.
Conflict in state 68 between rule 17 and token LT resolved as reduce.
Conflict in state 68 between rule 17 and token LE resolved as reduce.
Conflict in state 68 between rule 17 and token GT resolved as reduce.
Conflict in state 68 between rule 17 and token GE resolved as reduce.
Conflict in state 68 between rule 17 and token AND resolved as reduce.
Conflict in state 68 between rule 17 and token OR resolved as reduce.
Conflict in state 69 between rule 18 and token PLUS resolved as reduce.
Conflict in state 69 between rule 18 and token MINUS resolved as reduce.
Conflict in state 69 between rule 18 and token TIMES resolved as reduce.
Conflict in state 69 between rule 18 and token DIVIDE resolved as reduce.
Conflict in state 69 between rule 18 and token EQ resolved as reduce.
Conflict in state 69 between rule 18 and token NEQ resolved as reduce.
Conflict in state 69 between rule 18 and token LT resolved as reduce.
Conflict in state 69 between rule 18 and token LE resolved as reduce.
Conflict in state 69 between rule 18 and token GT resolved as reduce.
Conflict in state 69 between rule 18 and token GE resolved as reduce.
Conflict in state 69 between rule 18 and token AND resolved as reduce.
Conflict in state 69 between rule 18 and token OR resolved as reduce.
Conflict in state 70 between rule 19 and token PLUS resolved as shift.
Conflict in state 70 between rule 19 and token MINUS resolved as shift.
Conflict in state 70 between rule 19 and token TIMES resolved as shift.
Conflict in state 70 between rule 19 and token DIVIDE resolved as shift.
Conflict in state 70 between rule 19 and token EQ resolved as reduce.
Conflict in state 70 between rule 19 and token NEQ resolved as reduce.
Conflict in state 70 between rule 19 and token LT resolved as reduce.
Conflict in state 70 between rule 19 and token LE resolved as reduce.
Conflict in state 70 between rule 19 and token GT resolved as reduce.
Conflict in state 70 between rule 19 and token GE resolved as reduce.
Conflict in state 70 between rule 19 and token AND resolved as reduce.
Conflict in state 70 between rule 19 and token OR resolved as reduce.
Conflict in state 71 between rule 20 and token PLUS resolved as shift.
Conflict in state 71 between rule 20 and token MINUS resolved as shift.
Conflict in state 71 between rule 20 and token TIMES resolved as shift.
Conflict in state 71 between rule 20 and token DIVIDE resolved as shift.
Conflict in state 71 between rule 20 and token EQ resolved as reduce.
Conflict in state 71 between rule 20 and token NEQ resolved as reduce.
Conflict in state 71 between rule 20 and token LT resolved as reduce.
Conflict in state 71 between rule 20 and token LE resolved as reduce.
Conflict in state 71 between rule 20 and token GT resolved as reduce.
Conflict in state 71 between rule 20 and token GE resolved as reduce.
Conflict in state 71 between rule 20 and token AND resolved as reduce.
Conflict in state 71 between rule 20 and token OR resolved as reduce.
Conflict in state 72 between rule 21 and token PLUS resolved as shift.
Conflict in state 72 between rule 21 and token MINUS resolved as shift.
Conflict in state 72 between rule 21 and token TIMES resolved as shift.
Conflict in state 72 between rule 21 and token DIVIDE resolved as shift.
Conflict in state 72 between rule 21 and token EQ resolved as reduce.
Conflict in state 72 between rule 21 and token NEQ resolved as reduce.
Conflict in state 72 between rule 21 and token LT resolved as reduce.
Conflict in state 72 between rule 21 and token LE resolved as reduce.
Conflict in state 72 between rule 21 and token GT resolved as reduce.
Conflict in state 72 between rule 21 and token GE resolved as reduce.
Conflict in state 72 between rule 21 and token AND resolved as reduce.
Conflict in state 72 between rule 21 and token OR resolved as reduce.
Conflict in state 73 between rule 22 and token PLUS resolved as shift.
Conflict in state 73 between rule 22 and token MINUS resolved as shift.
Conflict in state 73 between rule 22 and token TIMES resolved as shift.
Conflict in state 73 between rule 22 and token DIVIDE resolved as shift.
Conflict in state 73 between rule 22 and token EQ resolved as reduce.
Conflict in state 73 between rule 22 and token NEQ resolved as reduce.
Conflict in state 73 between rule 22 and token LT resolved as reduce.
Conflict in state 73 between rule 22 and token LE resolved as reduce.
Conflict in state 73 between rule 22 and token GT resolved as reduce.
Conflict in state 73 between rule 22 and token GE resolved as reduce.
Conflict in state 73 between rule 22 and token AND resolved as reduce.
Conflict in state 73 between rule 22 and token OR resolved as reduce.
Conflict in state 74 between rule 23 and token PLUS resolved as shift.
Conflict in state 74 between rule 23 and token MINUS resolved as shift.
Conflict in state 74 between rule 23 and token TIMES resolved as shift.
Conflict in state 74 between rule 23 and token DIVIDE resolved as shift.
Conflict in state 74 between rule 23 and token EQ resolved as reduce.
Conflict in state 74 between rule 23 and token NEQ resolved as reduce.
Conflict in state 74 between rule 23 and token LT resolved as reduce.
Conflict in state 74 between rule 23 and token LE resolved as reduce.
Conflict in state 74 between rule 23 and token GT resolved as reduce.
Conflict in state 74 between rule 23 and token GE resolved as reduce.
Conflict in state 74 between rule 23 and token AND resolved as reduce.
Conflict in state 74 between rule 23 and token OR resolved as reduce.
Conflict in state 75 between rule 24 and token PLUS resolved as shift.
Conflict in state 75 between rule 24 and token MINUS resolved as shift.
Conflict in state 75 between rule 24 and token TIMES resolved as shift.
Conflict in state 75 between rule 24 and token DIVIDE resolved as shift.
Conflict in state 75 between rule 24 and token EQ resolved as reduce.
Conflict in state 75 between rule 24 and token NEQ resolved as reduce.
Conflict in state 75 between rule 24 and token LT resolved as reduce.
Conflict in state 75 between rule 24 and token LE resolved as reduce.
Conflict in state 75 between rule 24 and token GT resolved as reduce.
Conflict in state 75 between rule 24 and token GE resolved as reduce.
Conflict in state 75 between rule 24 and token AND resolved as reduce.
Conflict in state 75 between rule 24 and token OR resolved as reduce.
Conflict in state 76 between rule 25 and token PLUS resolved as shift.
Conflict in state 76 between rule 25 and token MINUS resolved as shift.
Conflict in state 76 between rule 25 and token TIMES resolved as shift.
Conflict in state 76 between rule 25 and token DIVIDE resolved as shift.
Conflict in state 76 between rule 25 and token EQ resolved as shift.
Conflict in state 76 between rule 25 and token NEQ resolved as shift.
Conflict in state 76 between rule 25 and token LT resolved as shift.
Conflict in state 76 between rule 25 and token LE resolved as shift.
Conflict in state 76 between rule 25 and token GT resolved as shift.
Conflict in state 76 between rule 25 and token GE resolved as shift.
Conflict in state 76 between rule 25 and token AND resolved as reduce.
Conflict in state 76 between rule 25 and token OR resolved as reduce.
Conflict in state 77 between rule 26 and token PLUS resolved as shift.
Conflict in state 77 between rule 26 and token MINUS resolved as shift.
Conflict in state 77 between rule 26 and token TIMES resolved as shift.
Conflict in state 77 between rule 26 and token DIVIDE resolved as shift.
Conflict in state 77 between rule 26 and token EQ resolved as shift.
Conflict in state 77 between rule 26 and token NEQ resolved as shift.
Conflict in state 77 between rule 26 and token LT resolved as shift.
Conflict in state 77 between rule 26 and token LE resolved as shift.
Conflict in state 77 between rule 26 and token GT resolved as shift.
Conflict in state 77 between rule 26 and token GE resolved as shift.
Conflict in state 77 between rule 26 and token AND resolved as reduce.
Conflict in state 77 between rule 26 and token OR resolved as reduce.
Conflict in state 81 between rule 66 and token PLUS resolved as shift.
Conflict in state 81 between rule 66 and token MINUS resolved as shift.
Conflict in state 81 between rule 66 and token TIMES resolved as shift.
Conflict in state 81 between rule 66 and token DIVIDE resolved as shift.
Conflict in state 81 between rule 66 and token EQ resolved as shift.
Conflict in state 81 between rule 66 and token NEQ resolved as shift.
Conflict in state 81 between rule 66 and token LT resolved as shift.
Conflict in state 81 between rule 66 and token LE resolved as shift.
Conflict in state 81 between rule 66 and token GT resolved as shift.
Conflict in state 81 between rule 66 and token GE resolved as shift.
Conflict in state 81 between rule 66 and token AND resolved as shift.
Conflict in state 81 between rule 66 and token OR resolved as shift.
Conflict in state 88 between rule 27 and token PLUS resolved as shift.
Conflict in state 88 between rule 27 and token MINUS resolved as shift.
Conflict in state 88 between rule 27 and token TIMES resolved as shift.
Conflict in state 88 between rule 27 and token DIVIDE resolved as shift.
Conflict in state 88 between rule 27 and token EQ resolved as shift.
Conflict in state 88 between rule 27 and token NEQ resolved as shift.
Conflict in state 88 between rule 27 and token LT resolved as shift.
Conflict in state 88 between rule 27 and token LE resolved as shift.
Conflict in state 88 between rule 27 and token GT resolved as shift.
Conflict in state 88 between rule 27 and token GE resolved as shift.
Conflict in state 88 between rule 27 and token AND resolved as shift.
Conflict in state 88 between rule 27 and token OR resolved as shift.
Conflict in state 152 between rule 28 and token PLUS resolved as shift.
Conflict in state 152 between rule 28 and token MINUS resolved as shift.
Conflict in state 152 between rule 28 and token TIMES resolved as shift.
Conflict in state 152 between rule 28 and token DIVIDE resolved as shift.
Conflict in state 152 between rule 28 and token EQ resolved as shift.
Conflict in state 152 between rule 28 and token NEQ resolved as shift.
Conflict in state 152 between rule 28 and token LT resolved as shift.
Conflict in state 152 between rule 28 and token LE resolved as shift.
Conflict in state 152 between rule 28 and token GT resolved as shift.
Conflict in state 152 between rule 28 and token GE resolved as shift.
Conflict in state 152 between rule 28 and token AND resolved as shift.
Conflict in state 152 between rule 28 and token OR resolved as shift.
State 4 contains 1 shift/reduce conflict.
State 80 contains 2 shift/reduce conflicts.

Grammar
rule 1    program -> exp
rule 2    exp -> INT
rule 3    exp -> FLOAT
rule 4    exp -> STRING
rule 5    exp -> variable
rule 6    exp -> SequenceExp
rule 7    exp -> LPAREN exp RPAREN
rule 8    exp -> LetExp
rule 9    exp -> ForExp
rule 10   exp -> IfThenExp
rule 11   exp -> AssignExp
rule 12   exp -> OpExp
rule 13   exp -> CallExp
rule 14   exp -> NIL
rule 15   OpExp -> exp PLUS exp
rule 16   OpExp -> exp MINUS exp
rule 17   OpExp -> exp TIMES exp
rule 18   OpExp -> exp DIVIDE exp
rule 19   OpExp -> exp EQ exp
rule 20   OpExp -> exp NEQ exp
rule 21   OpExp -> exp LT exp
rule 22   OpExp -> exp LE exp
rule 23   OpExp -> exp GT exp
rule 24   OpExp -> exp GE exp
rule 25   OpExp -> exp AND exp
rule 26   OpExp -> exp OR exp
rule 27   IfThenExp -> IF exp THEN exp
rule 28   ForExp -> FOR ID ASSIGN exp TO exp DO exp
rule 29   ListExpSemicolon -> exp SEMICOLON ListExpSemicolon
rule 30   ListExpSemicolon -> exp SEMICOLON exp
rule 31   ListExpComma -> exp COMMA ListExpComma
rule 32   ListExpComma -> exp
rule 33   SequenceExp -> LPAREN ListExpSemicolon RPAREN
rule 34   TypeFields -> ID COLON ID COMMA TypeFields
rule 35   TypeFields -> ID COLON ID
rule 36   TypeDeclaration -> TYPE ID EQ ID
rule 37   TypeDeclaration -> TYPE ID EQ ARRAY OF ID
rule 38   TypeDeclaration -> TYPE ID EQ LBRACE TypeFields RBRACE
rule 39   AllocateArrayExp -> ID LBRACK INT RBRACK OF NIL
rule 40   AllocateArrayExp -> ID LBRACK INT RBRACK OF INT
rule 41   AllocateArrayExp -> ID LBRACK INT RBRACK OF FLOAT
rule 42   AllocateRecordExp -> ID LBRACE ListExpComma RBRACE
rule 43   VariableDeclaration -> VAR ID COLON ID
rule 44   VariableDeclaration -> VAR ID ASSIGN exp
rule 45   VariableDeclaration -> VAR ID ASSIGN AllocateArrayExp
rule 46   VariableDeclaration -> VAR ID ASSIGN AllocateRecordExp
rule 47   VariableDeclaration -> VAR ID COLON ID ASSIGN exp
rule 48   VariableDeclaration -> VAR ID COLON ID ASSIGN AllocateArrayExp
rule 49   VariableDeclaration -> VAR ID COLON ID ASSIGN AllocateRecordExp
rule 50   FunctionDeclaration -> FUNCTION ID LPAREN RPAREN EQ exp
rule 51   FunctionDeclaration -> FUNCTION ID LPAREN RPAREN COLON ID EQ exp
rule 52   FunctionDeclaration -> FUNCTION ID LPAREN TypeFields RPAREN EQ exp
rule 53   FunctionDeclaration -> FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ exp
rule 54   declaration -> TypeDeclaration
rule 55   declaration -> VariableDeclaration
rule 56   declaration -> FunctionDeclaration
rule 57   declaration -> ClassDeclaration
rule 58   declarations -> declaration declarations
rule 59   declarations -> declaration
rule 60   LetExp -> LET declarations IN exp END
rule 61   variable -> ID
rule 62   variable -> ID ARROW CallExp
rule 63   variable -> variable ARROW ID
rule 64   variable -> ID ARROW ID
rule 65   variable -> variable LBRACK exp RBRACK
rule 66   AssignExp -> variable ASSIGN exp
rule 67   AssignExp -> variable ASSIGN AllocateArrayExp
rule 68   AssignExp -> variable ASSIGN AllocateRecordExp
rule 69   CallExp -> ID LPAREN RPAREN
rule 70   CallExp -> ID LPAREN ListExpComma RPAREN
rule 71   ClassDeclaration -> CLASS ID EQ LBRACE ClassBody RBRACE
rule 72   ClassDeclaration -> CLASS ID EXTENDS ID EQ LBRACE ClassBody RBRACE
rule 73   ClassBody -> MembersDeclarationList MethodsDeclarationList
rule 74   ClassBody -> MembersDeclarationList
rule 75   ClassBody -> MethodsDeclarationList
rule 76   MembersDeclarationList -> ID COLON ID SEMICOLON MembersDeclarationList
rule 77   MembersDeclarationList -> ID COLON ID SEMICOLON
rule 78   MethodsDeclarationList -> MethodsDec MethodsDeclarationList
rule 79   MethodsDeclarationList -> MethodsDec
rule 80   MethodsDec -> FUNCTION ID LPAREN RPAREN EQ exp
rule 81   MethodsDec -> FUNCTION ID LPAREN RPAREN COLON ID EQ exp
rule 82   MethodsDec -> FUNCTION ID LPAREN TypeFields RPAREN EQ exp
rule 83   MethodsDec -> FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ exp

Terminals, with rules where they appear

$ (-1)
error (256)
INT (258) 2 39 40 41
FLOAT (259) 3 41
STRING (260) 4
ID (261) 28 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52
    53 61 62 63 64 69 70 71 72 76 77 80 81 82 83
COMMA (262) 31 34
COLON (263) 34 35 43 47 48 49 51 53 76 77 81 83
SEMICOLON (264) 29 30 76 77
LPAREN (265) 7 33 50 51 52 53 69 70 80 81 82 83
RPAREN (266) 7 33 50 51 52 53 69 70 80 81 82 83
LBRACK (267) 39 40 41 65
RBRACK (268) 39 40 41 65
LBRACE (269) 38 42 71 72
RBRACE (270) 38 42 71 72
ARROW (271) 62 63 64
PLUS (272) 15
MINUS (273) 16
TIMES (274) 17
DIVIDE (275) 18
EQ (276) 19 36 37 38 50 51 52 53 71 72 80 81 82 83
NEQ (277) 20
LT (278) 21
LE (279) 22
GT (280) 23
GE (281) 24
AND (282) 25
OR (283) 26
ASSIGN (284) 28 44 45 46 47 48 49 66 67 68
ARRAY (285) 37
IF (286) 27
THEN (287) 27
ELSE (288)
WHILE (289)
FOR (290) 28
TO (291) 28
DO (292) 28
LET (293) 60
IN (294) 60
END (295) 60
OF (296) 37 39 40 41
BREAK (297)
NIL (298) 14 39
FUNCTION (299) 50 51 52 53 80 81 82 83
VAR (300) 43 44 45 46 47 48 49
TYPE (301) 36 37 38
CLASS (302) 71 72
EXTENDS (303) 72

Nonterminals, with rules where they appear

program (49)
    on left: 1
exp (50)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14, on right: 1 7 15 16 17
    18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 44 47 50 51 52 53
    60 65 66 80 81 82 83
OpExp (51)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26, on right: 12
IfThenExp (52)
    on left: 27, on right: 10
ForExp (53)
    on left: 28, on right: 9
ListExpSemicolon (54)
    on left: 29 30, on right: 29 33
ListExpComma (55)
    on left: 31 32, on right: 31 42 70
SequenceExp (56)
    on left: 33, on right: 6
TypeFields (57)
    on left: 34 35, on right: 34 38 52 53 82 83
TypeDeclaration (58)
    on left: 36 37 38, on right: 54
AllocateArrayExp (59)
    on left: 39 40 41, on right: 45 48 67
AllocateRecordExp (60)
    on left: 42, on right: 46 49 68
VariableDeclaration (61)
    on left: 43 44 45 46 47 48 49, on right: 55
FunctionDeclaration (62)
    on left: 50 51 52 53, on right: 56
declaration (63)
    on left: 54 55 56 57, on right: 58 59
declarations (64)
    on left: 58 59, on right: 58 60
LetExp (65)
    on left: 60, on right: 8
variable (66)
    on left: 61 62 63 64 65, on right: 5 63 65 66 67 68
AssignExp (67)
    on left: 66 67 68, on right: 11
CallExp (68)
    on left: 69 70, on right: 13 62
ClassDeclaration (69)
    on left: 71 72, on right: 57
ClassBody (70)
    on left: 73 74 75, on right: 71 72
MembersDeclarationList (71)
    on left: 76 77, on right: 73 74 76
MethodsDeclarationList (72)
    on left: 78 79, on right: 73 75 78
MethodsDec (73)
    on left: 80 81 82 83, on right: 78 79


state 0

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    program	go to state 185
    exp 	go to state 10
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 1

    exp  ->  INT .   (rule 2)

    $default	reduce using rule 2 (exp)



state 2

    exp  ->  FLOAT .   (rule 3)

    $default	reduce using rule 3 (exp)



state 3

    exp  ->  STRING .   (rule 4)

    $default	reduce using rule 4 (exp)



state 4

    variable  ->  ID .   (rule 61)
    variable  ->  ID . ARROW CallExp   (rule 62)
    variable  ->  ID . ARROW ID   (rule 64)
    CallExp  ->  ID . LPAREN RPAREN   (rule 69)
    CallExp  ->  ID . LPAREN ListExpComma RPAREN   (rule 70)

    LPAREN	shift, and go to state 19
    ARROW	shift, and go to state 20

    ARROW	[reduce using rule 61 (variable)]
    $default	reduce using rule 61 (variable)



state 5

    exp  ->  LPAREN . exp RPAREN   (rule 7)
    SequenceExp  ->  LPAREN . ListExpSemicolon RPAREN   (rule 33)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 21
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpSemicolon	go to state 22
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 6

    IfThenExp  ->  IF . exp THEN exp   (rule 27)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 23
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 7

    ForExp  ->  FOR . ID ASSIGN exp TO exp DO exp   (rule 28)

    ID  	shift, and go to state 24



state 8

    LetExp  ->  LET . declarations IN exp END   (rule 60)

    FUNCTION	shift, and go to state 25
    VAR 	shift, and go to state 26
    TYPE	shift, and go to state 27
    CLASS	shift, and go to state 28

    TypeDeclaration	go to state 29
    VariableDeclaration	go to state 30
    FunctionDeclaration	go to state 31
    declaration	go to state 32
    declarations	go to state 33
    ClassDeclaration	go to state 34



state 9

    exp  ->  NIL .   (rule 14)

    $default	reduce using rule 14 (exp)



state 10

    program  ->  exp .   (rule 1)
    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 1 (program)



state 11

    exp  ->  OpExp .   (rule 12)

    $default	reduce using rule 12 (exp)



state 12

    exp  ->  IfThenExp .   (rule 10)

    $default	reduce using rule 10 (exp)



state 13

    exp  ->  ForExp .   (rule 9)

    $default	reduce using rule 9 (exp)



state 14

    exp  ->  SequenceExp .   (rule 6)

    $default	reduce using rule 6 (exp)



state 15

    exp  ->  LetExp .   (rule 8)

    $default	reduce using rule 8 (exp)



state 16

    exp  ->  variable .   (rule 5)
    variable  ->  variable . ARROW ID   (rule 63)
    variable  ->  variable . LBRACK exp RBRACK   (rule 65)
    AssignExp  ->  variable . ASSIGN exp   (rule 66)
    AssignExp  ->  variable . ASSIGN AllocateArrayExp   (rule 67)
    AssignExp  ->  variable . ASSIGN AllocateRecordExp   (rule 68)

    LBRACK	shift, and go to state 47
    ARROW	shift, and go to state 48
    ASSIGN	shift, and go to state 49

    $default	reduce using rule 5 (exp)



state 17

    exp  ->  AssignExp .   (rule 11)

    $default	reduce using rule 11 (exp)



state 18

    exp  ->  CallExp .   (rule 13)

    $default	reduce using rule 13 (exp)



state 19

    CallExp  ->  ID LPAREN . RPAREN   (rule 69)
    CallExp  ->  ID LPAREN . ListExpComma RPAREN   (rule 70)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    RPAREN	shift, and go to state 50
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 51
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpComma	go to state 52
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 20

    variable  ->  ID ARROW . CallExp   (rule 62)
    variable  ->  ID ARROW . ID   (rule 64)

    ID  	shift, and go to state 53

    CallExp	go to state 54



state 21

    exp  ->  LPAREN exp . RPAREN   (rule 7)
    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ListExpSemicolon  ->  exp . SEMICOLON ListExpSemicolon   (rule 29)
    ListExpSemicolon  ->  exp . SEMICOLON exp   (rule 30)

    SEMICOLON	shift, and go to state 55
    RPAREN	shift, and go to state 56
    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46



state 22

    SequenceExp  ->  LPAREN ListExpSemicolon . RPAREN   (rule 33)

    RPAREN	shift, and go to state 57



state 23

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    IfThenExp  ->  IF exp . THEN exp   (rule 27)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46
    THEN	shift, and go to state 58



state 24

    ForExp  ->  FOR ID . ASSIGN exp TO exp DO exp   (rule 28)

    ASSIGN	shift, and go to state 59



state 25

    FunctionDeclaration  ->  FUNCTION . ID LPAREN RPAREN EQ exp   (rule 50)
    FunctionDeclaration  ->  FUNCTION . ID LPAREN RPAREN COLON ID EQ exp   (rule 51)
    FunctionDeclaration  ->  FUNCTION . ID LPAREN TypeFields RPAREN EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION . ID LPAREN TypeFields RPAREN COLON ID EQ exp   (rule 53)

    ID  	shift, and go to state 60



state 26

    VariableDeclaration  ->  VAR . ID COLON ID   (rule 43)
    VariableDeclaration  ->  VAR . ID ASSIGN exp   (rule 44)
    VariableDeclaration  ->  VAR . ID ASSIGN AllocateArrayExp   (rule 45)
    VariableDeclaration  ->  VAR . ID ASSIGN AllocateRecordExp   (rule 46)
    VariableDeclaration  ->  VAR . ID COLON ID ASSIGN exp   (rule 47)
    VariableDeclaration  ->  VAR . ID COLON ID ASSIGN AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR . ID COLON ID ASSIGN AllocateRecordExp   (rule 49)

    ID  	shift, and go to state 61



state 27

    TypeDeclaration  ->  TYPE . ID EQ ID   (rule 36)
    TypeDeclaration  ->  TYPE . ID EQ ARRAY OF ID   (rule 37)
    TypeDeclaration  ->  TYPE . ID EQ LBRACE TypeFields RBRACE   (rule 38)

    ID  	shift, and go to state 62



state 28

    ClassDeclaration  ->  CLASS . ID EQ LBRACE ClassBody RBRACE   (rule 71)
    ClassDeclaration  ->  CLASS . ID EXTENDS ID EQ LBRACE ClassBody RBRACE   (rule 72)

    ID  	shift, and go to state 63



state 29

    declaration  ->  TypeDeclaration .   (rule 54)

    $default	reduce using rule 54 (declaration)



state 30

    declaration  ->  VariableDeclaration .   (rule 55)

    $default	reduce using rule 55 (declaration)



state 31

    declaration  ->  FunctionDeclaration .   (rule 56)

    $default	reduce using rule 56 (declaration)



state 32

    declarations  ->  declaration . declarations   (rule 58)
    declarations  ->  declaration .   (rule 59)

    FUNCTION	shift, and go to state 25
    VAR 	shift, and go to state 26
    TYPE	shift, and go to state 27
    CLASS	shift, and go to state 28

    $default	reduce using rule 59 (declarations)

    TypeDeclaration	go to state 29
    VariableDeclaration	go to state 30
    FunctionDeclaration	go to state 31
    declaration	go to state 32
    declarations	go to state 64
    ClassDeclaration	go to state 34



state 33

    LetExp  ->  LET declarations . IN exp END   (rule 60)

    IN  	shift, and go to state 65



state 34

    declaration  ->  ClassDeclaration .   (rule 57)

    $default	reduce using rule 57 (declaration)



state 35

    OpExp  ->  exp PLUS . exp   (rule 15)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 66
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 36

    OpExp  ->  exp MINUS . exp   (rule 16)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 67
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 37

    OpExp  ->  exp TIMES . exp   (rule 17)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 68
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 38

    OpExp  ->  exp DIVIDE . exp   (rule 18)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 69
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 39

    OpExp  ->  exp EQ . exp   (rule 19)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 70
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 40

    OpExp  ->  exp NEQ . exp   (rule 20)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 71
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 41

    OpExp  ->  exp LT . exp   (rule 21)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 72
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 42

    OpExp  ->  exp LE . exp   (rule 22)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 73
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 43

    OpExp  ->  exp GT . exp   (rule 23)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 74
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 44

    OpExp  ->  exp GE . exp   (rule 24)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 75
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 45

    OpExp  ->  exp AND . exp   (rule 25)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 76
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 46

    OpExp  ->  exp OR . exp   (rule 26)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 77
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 47

    variable  ->  variable LBRACK . exp RBRACK   (rule 65)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 78
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 48

    variable  ->  variable ARROW . ID   (rule 63)

    ID  	shift, and go to state 79



state 49

    AssignExp  ->  variable ASSIGN . exp   (rule 66)
    AssignExp  ->  variable ASSIGN . AllocateArrayExp   (rule 67)
    AssignExp  ->  variable ASSIGN . AllocateRecordExp   (rule 68)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 80
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 81
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    AllocateArrayExp	go to state 82
    AllocateRecordExp	go to state 83
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 50

    CallExp  ->  ID LPAREN RPAREN .   (rule 69)

    $default	reduce using rule 69 (CallExp)



state 51

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ListExpComma  ->  exp . COMMA ListExpComma   (rule 31)
    ListExpComma  ->  exp .   (rule 32)

    COMMA	shift, and go to state 84
    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 32 (ListExpComma)



state 52

    CallExp  ->  ID LPAREN ListExpComma . RPAREN   (rule 70)

    RPAREN	shift, and go to state 85



state 53

    variable  ->  ID ARROW ID .   (rule 64)
    CallExp  ->  ID . LPAREN RPAREN   (rule 69)
    CallExp  ->  ID . LPAREN ListExpComma RPAREN   (rule 70)

    LPAREN	shift, and go to state 19

    $default	reduce using rule 64 (variable)



state 54

    variable  ->  ID ARROW CallExp .   (rule 62)

    $default	reduce using rule 62 (variable)



state 55

    ListExpSemicolon  ->  exp SEMICOLON . ListExpSemicolon   (rule 29)
    ListExpSemicolon  ->  exp SEMICOLON . exp   (rule 30)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 86
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpSemicolon	go to state 87
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 56

    exp  ->  LPAREN exp RPAREN .   (rule 7)

    $default	reduce using rule 7 (exp)



state 57

    SequenceExp  ->  LPAREN ListExpSemicolon RPAREN .   (rule 33)

    $default	reduce using rule 33 (SequenceExp)



state 58

    IfThenExp  ->  IF exp THEN . exp   (rule 27)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 88
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 59

    ForExp  ->  FOR ID ASSIGN . exp TO exp DO exp   (rule 28)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 89
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 60

    FunctionDeclaration  ->  FUNCTION ID . LPAREN RPAREN EQ exp   (rule 50)
    FunctionDeclaration  ->  FUNCTION ID . LPAREN RPAREN COLON ID EQ exp   (rule 51)
    FunctionDeclaration  ->  FUNCTION ID . LPAREN TypeFields RPAREN EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION ID . LPAREN TypeFields RPAREN COLON ID EQ exp   (rule 53)

    LPAREN	shift, and go to state 90



state 61

    VariableDeclaration  ->  VAR ID . COLON ID   (rule 43)
    VariableDeclaration  ->  VAR ID . ASSIGN exp   (rule 44)
    VariableDeclaration  ->  VAR ID . ASSIGN AllocateArrayExp   (rule 45)
    VariableDeclaration  ->  VAR ID . ASSIGN AllocateRecordExp   (rule 46)
    VariableDeclaration  ->  VAR ID . COLON ID ASSIGN exp   (rule 47)
    VariableDeclaration  ->  VAR ID . COLON ID ASSIGN AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR ID . COLON ID ASSIGN AllocateRecordExp   (rule 49)

    COLON	shift, and go to state 91
    ASSIGN	shift, and go to state 92



state 62

    TypeDeclaration  ->  TYPE ID . EQ ID   (rule 36)
    TypeDeclaration  ->  TYPE ID . EQ ARRAY OF ID   (rule 37)
    TypeDeclaration  ->  TYPE ID . EQ LBRACE TypeFields RBRACE   (rule 38)

    EQ  	shift, and go to state 93



state 63

    ClassDeclaration  ->  CLASS ID . EQ LBRACE ClassBody RBRACE   (rule 71)
    ClassDeclaration  ->  CLASS ID . EXTENDS ID EQ LBRACE ClassBody RBRACE   (rule 72)

    EQ  	shift, and go to state 94
    EXTENDS	shift, and go to state 95



state 64

    declarations  ->  declaration declarations .   (rule 58)

    $default	reduce using rule 58 (declarations)



state 65

    LetExp  ->  LET declarations IN . exp END   (rule 60)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 96
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 66

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp PLUS exp .   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38

    $default	reduce using rule 15 (OpExp)



state 67

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp MINUS exp .   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38

    $default	reduce using rule 16 (OpExp)



state 68

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp TIMES exp .   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)


    $default	reduce using rule 17 (OpExp)



state 69

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp DIVIDE exp .   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)


    $default	reduce using rule 18 (OpExp)



state 70

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp EQ exp .   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38

    $default	reduce using rule 19 (OpExp)



state 71

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp NEQ exp .   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38

    $default	reduce using rule 20 (OpExp)



state 72

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp LT exp .   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38

    $default	reduce using rule 21 (OpExp)



state 73

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp LE exp .   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38

    $default	reduce using rule 22 (OpExp)



state 74

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp GT exp .   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38

    $default	reduce using rule 23 (OpExp)



state 75

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp GE exp .   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38

    $default	reduce using rule 24 (OpExp)



state 76

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp AND exp .   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44

    $default	reduce using rule 25 (OpExp)



state 77

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    OpExp  ->  exp OR exp .   (rule 26)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44

    $default	reduce using rule 26 (OpExp)



state 78

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    variable  ->  variable LBRACK exp . RBRACK   (rule 65)

    RBRACK	shift, and go to state 97
    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46



state 79

    variable  ->  variable ARROW ID .   (rule 63)

    $default	reduce using rule 63 (variable)



state 80

    AllocateArrayExp  ->  ID . LBRACK INT RBRACK OF NIL   (rule 39)
    AllocateArrayExp  ->  ID . LBRACK INT RBRACK OF INT   (rule 40)
    AllocateArrayExp  ->  ID . LBRACK INT RBRACK OF FLOAT   (rule 41)
    AllocateRecordExp  ->  ID . LBRACE ListExpComma RBRACE   (rule 42)
    variable  ->  ID .   (rule 61)
    variable  ->  ID . ARROW CallExp   (rule 62)
    variable  ->  ID . ARROW ID   (rule 64)
    CallExp  ->  ID . LPAREN RPAREN   (rule 69)
    CallExp  ->  ID . LPAREN ListExpComma RPAREN   (rule 70)

    LPAREN	shift, and go to state 19
    LBRACK	shift, and go to state 98
    LBRACE	shift, and go to state 99
    ARROW	shift, and go to state 20

    LBRACK	[reduce using rule 61 (variable)]
    ARROW	[reduce using rule 61 (variable)]
    $default	reduce using rule 61 (variable)



state 81

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    AssignExp  ->  variable ASSIGN exp .   (rule 66)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 66 (AssignExp)



state 82

    AssignExp  ->  variable ASSIGN AllocateArrayExp .   (rule 67)

    $default	reduce using rule 67 (AssignExp)



state 83

    AssignExp  ->  variable ASSIGN AllocateRecordExp .   (rule 68)

    $default	reduce using rule 68 (AssignExp)



state 84

    ListExpComma  ->  exp COMMA . ListExpComma   (rule 31)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 51
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpComma	go to state 100
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 85

    CallExp  ->  ID LPAREN ListExpComma RPAREN .   (rule 70)

    $default	reduce using rule 70 (CallExp)



state 86

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ListExpSemicolon  ->  exp . SEMICOLON ListExpSemicolon   (rule 29)
    ListExpSemicolon  ->  exp . SEMICOLON exp   (rule 30)
    ListExpSemicolon  ->  exp SEMICOLON exp .   (rule 30)

    SEMICOLON	shift, and go to state 55
    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 30 (ListExpSemicolon)



state 87

    ListExpSemicolon  ->  exp SEMICOLON ListExpSemicolon .   (rule 29)

    $default	reduce using rule 29 (ListExpSemicolon)



state 88

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    IfThenExp  ->  IF exp THEN exp .   (rule 27)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 27 (IfThenExp)



state 89

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ForExp  ->  FOR ID ASSIGN exp . TO exp DO exp   (rule 28)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46
    TO  	shift, and go to state 101



state 90

    FunctionDeclaration  ->  FUNCTION ID LPAREN . RPAREN EQ exp   (rule 50)
    FunctionDeclaration  ->  FUNCTION ID LPAREN . RPAREN COLON ID EQ exp   (rule 51)
    FunctionDeclaration  ->  FUNCTION ID LPAREN . TypeFields RPAREN EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION ID LPAREN . TypeFields RPAREN COLON ID EQ exp   (rule 53)

    ID  	shift, and go to state 102
    RPAREN	shift, and go to state 103

    TypeFields	go to state 104



state 91

    VariableDeclaration  ->  VAR ID COLON . ID   (rule 43)
    VariableDeclaration  ->  VAR ID COLON . ID ASSIGN exp   (rule 47)
    VariableDeclaration  ->  VAR ID COLON . ID ASSIGN AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR ID COLON . ID ASSIGN AllocateRecordExp   (rule 49)

    ID  	shift, and go to state 105



state 92

    VariableDeclaration  ->  VAR ID ASSIGN . exp   (rule 44)
    VariableDeclaration  ->  VAR ID ASSIGN . AllocateArrayExp   (rule 45)
    VariableDeclaration  ->  VAR ID ASSIGN . AllocateRecordExp   (rule 46)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 80
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 106
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    AllocateArrayExp	go to state 107
    AllocateRecordExp	go to state 108
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 93

    TypeDeclaration  ->  TYPE ID EQ . ID   (rule 36)
    TypeDeclaration  ->  TYPE ID EQ . ARRAY OF ID   (rule 37)
    TypeDeclaration  ->  TYPE ID EQ . LBRACE TypeFields RBRACE   (rule 38)

    ID  	shift, and go to state 109
    LBRACE	shift, and go to state 110
    ARRAY	shift, and go to state 111



state 94

    ClassDeclaration  ->  CLASS ID EQ . LBRACE ClassBody RBRACE   (rule 71)

    LBRACE	shift, and go to state 112



state 95

    ClassDeclaration  ->  CLASS ID EXTENDS . ID EQ LBRACE ClassBody RBRACE   (rule 72)

    ID  	shift, and go to state 113



state 96

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    LetExp  ->  LET declarations IN exp . END   (rule 60)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46
    END 	shift, and go to state 114



state 97

    variable  ->  variable LBRACK exp RBRACK .   (rule 65)

    $default	reduce using rule 65 (variable)



state 98

    AllocateArrayExp  ->  ID LBRACK . INT RBRACK OF NIL   (rule 39)
    AllocateArrayExp  ->  ID LBRACK . INT RBRACK OF INT   (rule 40)
    AllocateArrayExp  ->  ID LBRACK . INT RBRACK OF FLOAT   (rule 41)

    INT 	shift, and go to state 115



state 99

    AllocateRecordExp  ->  ID LBRACE . ListExpComma RBRACE   (rule 42)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 51
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpComma	go to state 116
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 100

    ListExpComma  ->  exp COMMA ListExpComma .   (rule 31)

    $default	reduce using rule 31 (ListExpComma)



state 101

    ForExp  ->  FOR ID ASSIGN exp TO . exp DO exp   (rule 28)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 117
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 102

    TypeFields  ->  ID . COLON ID COMMA TypeFields   (rule 34)
    TypeFields  ->  ID . COLON ID   (rule 35)

    COLON	shift, and go to state 118



state 103

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN . EQ exp   (rule 50)
    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN . COLON ID EQ exp   (rule 51)

    COLON	shift, and go to state 119
    EQ  	shift, and go to state 120



state 104

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields . RPAREN EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields . RPAREN COLON ID EQ exp   (rule 53)

    RPAREN	shift, and go to state 121



state 105

    VariableDeclaration  ->  VAR ID COLON ID .   (rule 43)
    VariableDeclaration  ->  VAR ID COLON ID . ASSIGN exp   (rule 47)
    VariableDeclaration  ->  VAR ID COLON ID . ASSIGN AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR ID COLON ID . ASSIGN AllocateRecordExp   (rule 49)

    ASSIGN	shift, and go to state 122

    $default	reduce using rule 43 (VariableDeclaration)



state 106

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    VariableDeclaration  ->  VAR ID ASSIGN exp .   (rule 44)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 44 (VariableDeclaration)



state 107

    VariableDeclaration  ->  VAR ID ASSIGN AllocateArrayExp .   (rule 45)

    $default	reduce using rule 45 (VariableDeclaration)



state 108

    VariableDeclaration  ->  VAR ID ASSIGN AllocateRecordExp .   (rule 46)

    $default	reduce using rule 46 (VariableDeclaration)



state 109

    TypeDeclaration  ->  TYPE ID EQ ID .   (rule 36)

    $default	reduce using rule 36 (TypeDeclaration)



state 110

    TypeDeclaration  ->  TYPE ID EQ LBRACE . TypeFields RBRACE   (rule 38)

    ID  	shift, and go to state 102

    TypeFields	go to state 123



state 111

    TypeDeclaration  ->  TYPE ID EQ ARRAY . OF ID   (rule 37)

    OF  	shift, and go to state 124



state 112

    ClassDeclaration  ->  CLASS ID EQ LBRACE . ClassBody RBRACE   (rule 71)

    ID  	shift, and go to state 125
    FUNCTION	shift, and go to state 126

    ClassBody	go to state 127
    MembersDeclarationList	go to state 128
    MethodsDeclarationList	go to state 129
    MethodsDec	go to state 130



state 113

    ClassDeclaration  ->  CLASS ID EXTENDS ID . EQ LBRACE ClassBody RBRACE   (rule 72)

    EQ  	shift, and go to state 131



state 114

    LetExp  ->  LET declarations IN exp END .   (rule 60)

    $default	reduce using rule 60 (LetExp)



state 115

    AllocateArrayExp  ->  ID LBRACK INT . RBRACK OF NIL   (rule 39)
    AllocateArrayExp  ->  ID LBRACK INT . RBRACK OF INT   (rule 40)
    AllocateArrayExp  ->  ID LBRACK INT . RBRACK OF FLOAT   (rule 41)

    RBRACK	shift, and go to state 132



state 116

    AllocateRecordExp  ->  ID LBRACE ListExpComma . RBRACE   (rule 42)

    RBRACE	shift, and go to state 133



state 117

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ForExp  ->  FOR ID ASSIGN exp TO exp . DO exp   (rule 28)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46
    DO  	shift, and go to state 134



state 118

    TypeFields  ->  ID COLON . ID COMMA TypeFields   (rule 34)
    TypeFields  ->  ID COLON . ID   (rule 35)

    ID  	shift, and go to state 135



state 119

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN COLON . ID EQ exp   (rule 51)

    ID  	shift, and go to state 136



state 120

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN EQ . exp   (rule 50)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 137
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 121

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN . EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN . COLON ID EQ exp   (rule 53)

    COLON	shift, and go to state 138
    EQ  	shift, and go to state 139



state 122

    VariableDeclaration  ->  VAR ID COLON ID ASSIGN . exp   (rule 47)
    VariableDeclaration  ->  VAR ID COLON ID ASSIGN . AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR ID COLON ID ASSIGN . AllocateRecordExp   (rule 49)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 80
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 140
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    AllocateArrayExp	go to state 141
    AllocateRecordExp	go to state 142
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 123

    TypeDeclaration  ->  TYPE ID EQ LBRACE TypeFields . RBRACE   (rule 38)

    RBRACE	shift, and go to state 143



state 124

    TypeDeclaration  ->  TYPE ID EQ ARRAY OF . ID   (rule 37)

    ID  	shift, and go to state 144



state 125

    MembersDeclarationList  ->  ID . COLON ID SEMICOLON MembersDeclarationList   (rule 76)
    MembersDeclarationList  ->  ID . COLON ID SEMICOLON   (rule 77)

    COLON	shift, and go to state 145



state 126

    MethodsDec  ->  FUNCTION . ID LPAREN RPAREN EQ exp   (rule 80)
    MethodsDec  ->  FUNCTION . ID LPAREN RPAREN COLON ID EQ exp   (rule 81)
    MethodsDec  ->  FUNCTION . ID LPAREN TypeFields RPAREN EQ exp   (rule 82)
    MethodsDec  ->  FUNCTION . ID LPAREN TypeFields RPAREN COLON ID EQ exp   (rule 83)

    ID  	shift, and go to state 146



state 127

    ClassDeclaration  ->  CLASS ID EQ LBRACE ClassBody . RBRACE   (rule 71)

    RBRACE	shift, and go to state 147



state 128

    ClassBody  ->  MembersDeclarationList . MethodsDeclarationList   (rule 73)
    ClassBody  ->  MembersDeclarationList .   (rule 74)

    FUNCTION	shift, and go to state 126

    $default	reduce using rule 74 (ClassBody)

    MethodsDeclarationList	go to state 148
    MethodsDec	go to state 130



state 129

    ClassBody  ->  MethodsDeclarationList .   (rule 75)

    $default	reduce using rule 75 (ClassBody)



state 130

    MethodsDeclarationList  ->  MethodsDec . MethodsDeclarationList   (rule 78)
    MethodsDeclarationList  ->  MethodsDec .   (rule 79)

    FUNCTION	shift, and go to state 126

    $default	reduce using rule 79 (MethodsDeclarationList)

    MethodsDeclarationList	go to state 149
    MethodsDec	go to state 130



state 131

    ClassDeclaration  ->  CLASS ID EXTENDS ID EQ . LBRACE ClassBody RBRACE   (rule 72)

    LBRACE	shift, and go to state 150



state 132

    AllocateArrayExp  ->  ID LBRACK INT RBRACK . OF NIL   (rule 39)
    AllocateArrayExp  ->  ID LBRACK INT RBRACK . OF INT   (rule 40)
    AllocateArrayExp  ->  ID LBRACK INT RBRACK . OF FLOAT   (rule 41)

    OF  	shift, and go to state 151



state 133

    AllocateRecordExp  ->  ID LBRACE ListExpComma RBRACE .   (rule 42)

    $default	reduce using rule 42 (AllocateRecordExp)



state 134

    ForExp  ->  FOR ID ASSIGN exp TO exp DO . exp   (rule 28)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 152
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 135

    TypeFields  ->  ID COLON ID . COMMA TypeFields   (rule 34)
    TypeFields  ->  ID COLON ID .   (rule 35)

    COMMA	shift, and go to state 153

    $default	reduce using rule 35 (TypeFields)



state 136

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN COLON ID . EQ exp   (rule 51)

    EQ  	shift, and go to state 154



state 137

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN EQ exp .   (rule 50)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 50 (FunctionDeclaration)



state 138

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON . ID EQ exp   (rule 53)

    ID  	shift, and go to state 155



state 139

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN EQ . exp   (rule 52)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 156
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 140

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    VariableDeclaration  ->  VAR ID COLON ID ASSIGN exp .   (rule 47)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 47 (VariableDeclaration)



state 141

    VariableDeclaration  ->  VAR ID COLON ID ASSIGN AllocateArrayExp .   (rule 48)

    $default	reduce using rule 48 (VariableDeclaration)



state 142

    VariableDeclaration  ->  VAR ID COLON ID ASSIGN AllocateRecordExp .   (rule 49)

    $default	reduce using rule 49 (VariableDeclaration)



state 143

    TypeDeclaration  ->  TYPE ID EQ LBRACE TypeFields RBRACE .   (rule 38)

    $default	reduce using rule 38 (TypeDeclaration)



state 144

    TypeDeclaration  ->  TYPE ID EQ ARRAY OF ID .   (rule 37)

    $default	reduce using rule 37 (TypeDeclaration)



state 145

    MembersDeclarationList  ->  ID COLON . ID SEMICOLON MembersDeclarationList   (rule 76)
    MembersDeclarationList  ->  ID COLON . ID SEMICOLON   (rule 77)

    ID  	shift, and go to state 157



state 146

    MethodsDec  ->  FUNCTION ID . LPAREN RPAREN EQ exp   (rule 80)
    MethodsDec  ->  FUNCTION ID . LPAREN RPAREN COLON ID EQ exp   (rule 81)
    MethodsDec  ->  FUNCTION ID . LPAREN TypeFields RPAREN EQ exp   (rule 82)
    MethodsDec  ->  FUNCTION ID . LPAREN TypeFields RPAREN COLON ID EQ exp   (rule 83)

    LPAREN	shift, and go to state 158



state 147

    ClassDeclaration  ->  CLASS ID EQ LBRACE ClassBody RBRACE .   (rule 71)

    $default	reduce using rule 71 (ClassDeclaration)



state 148

    ClassBody  ->  MembersDeclarationList MethodsDeclarationList .   (rule 73)

    $default	reduce using rule 73 (ClassBody)



state 149

    MethodsDeclarationList  ->  MethodsDec MethodsDeclarationList .   (rule 78)

    $default	reduce using rule 78 (MethodsDeclarationList)



state 150

    ClassDeclaration  ->  CLASS ID EXTENDS ID EQ LBRACE . ClassBody RBRACE   (rule 72)

    ID  	shift, and go to state 125
    FUNCTION	shift, and go to state 126

    ClassBody	go to state 159
    MembersDeclarationList	go to state 128
    MethodsDeclarationList	go to state 129
    MethodsDec	go to state 130



state 151

    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF . NIL   (rule 39)
    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF . INT   (rule 40)
    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF . FLOAT   (rule 41)

    INT 	shift, and go to state 160
    FLOAT	shift, and go to state 161
    NIL 	shift, and go to state 162



state 152

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ForExp  ->  FOR ID ASSIGN exp TO exp DO exp .   (rule 28)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 28 (ForExp)



state 153

    TypeFields  ->  ID COLON ID COMMA . TypeFields   (rule 34)

    ID  	shift, and go to state 102

    TypeFields	go to state 163



state 154

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN COLON ID EQ . exp   (rule 51)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 164
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 155

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON ID . EQ exp   (rule 53)

    EQ  	shift, and go to state 165



state 156

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN EQ exp .   (rule 52)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 52 (FunctionDeclaration)



state 157

    MembersDeclarationList  ->  ID COLON ID . SEMICOLON MembersDeclarationList   (rule 76)
    MembersDeclarationList  ->  ID COLON ID . SEMICOLON   (rule 77)

    SEMICOLON	shift, and go to state 166



state 158

    MethodsDec  ->  FUNCTION ID LPAREN . RPAREN EQ exp   (rule 80)
    MethodsDec  ->  FUNCTION ID LPAREN . RPAREN COLON ID EQ exp   (rule 81)
    MethodsDec  ->  FUNCTION ID LPAREN . TypeFields RPAREN EQ exp   (rule 82)
    MethodsDec  ->  FUNCTION ID LPAREN . TypeFields RPAREN COLON ID EQ exp   (rule 83)

    ID  	shift, and go to state 102
    RPAREN	shift, and go to state 167

    TypeFields	go to state 168



state 159

    ClassDeclaration  ->  CLASS ID EXTENDS ID EQ LBRACE ClassBody . RBRACE   (rule 72)

    RBRACE	shift, and go to state 169



state 160

    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF INT .   (rule 40)

    $default	reduce using rule 40 (AllocateArrayExp)



state 161

    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF FLOAT .   (rule 41)

    $default	reduce using rule 41 (AllocateArrayExp)



state 162

    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF NIL .   (rule 39)

    $default	reduce using rule 39 (AllocateArrayExp)



state 163

    TypeFields  ->  ID COLON ID COMMA TypeFields .   (rule 34)

    $default	reduce using rule 34 (TypeFields)



state 164

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN COLON ID EQ exp .   (rule 51)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 51 (FunctionDeclaration)



state 165

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ . exp   (rule 53)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 170
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 166

    MembersDeclarationList  ->  ID COLON ID SEMICOLON . MembersDeclarationList   (rule 76)
    MembersDeclarationList  ->  ID COLON ID SEMICOLON .   (rule 77)

    ID  	shift, and go to state 125

    $default	reduce using rule 77 (MembersDeclarationList)

    MembersDeclarationList	go to state 171



state 167

    MethodsDec  ->  FUNCTION ID LPAREN RPAREN . EQ exp   (rule 80)
    MethodsDec  ->  FUNCTION ID LPAREN RPAREN . COLON ID EQ exp   (rule 81)

    COLON	shift, and go to state 172
    EQ  	shift, and go to state 173



state 168

    MethodsDec  ->  FUNCTION ID LPAREN TypeFields . RPAREN EQ exp   (rule 82)
    MethodsDec  ->  FUNCTION ID LPAREN TypeFields . RPAREN COLON ID EQ exp   (rule 83)

    RPAREN	shift, and go to state 174



state 169

    ClassDeclaration  ->  CLASS ID EXTENDS ID EQ LBRACE ClassBody RBRACE .   (rule 72)

    $default	reduce using rule 72 (ClassDeclaration)



state 170

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ exp .   (rule 53)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 53 (FunctionDeclaration)



state 171

    MembersDeclarationList  ->  ID COLON ID SEMICOLON MembersDeclarationList .   (rule 76)

    $default	reduce using rule 76 (MembersDeclarationList)



state 172

    MethodsDec  ->  FUNCTION ID LPAREN RPAREN COLON . ID EQ exp   (rule 81)

    ID  	shift, and go to state 175



state 173

    MethodsDec  ->  FUNCTION ID LPAREN RPAREN EQ . exp   (rule 80)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 176
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 174

    MethodsDec  ->  FUNCTION ID LPAREN TypeFields RPAREN . EQ exp   (rule 82)
    MethodsDec  ->  FUNCTION ID LPAREN TypeFields RPAREN . COLON ID EQ exp   (rule 83)

    COLON	shift, and go to state 177
    EQ  	shift, and go to state 178



state 175

    MethodsDec  ->  FUNCTION ID LPAREN RPAREN COLON ID . EQ exp   (rule 81)

    EQ  	shift, and go to state 179



state 176

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    MethodsDec  ->  FUNCTION ID LPAREN RPAREN EQ exp .   (rule 80)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 80 (MethodsDec)



state 177

    MethodsDec  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON . ID EQ exp   (rule 83)

    ID  	shift, and go to state 180



state 178

    MethodsDec  ->  FUNCTION ID LPAREN TypeFields RPAREN EQ . exp   (rule 82)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 181
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 179

    MethodsDec  ->  FUNCTION ID LPAREN RPAREN COLON ID EQ . exp   (rule 81)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 182
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 180

    MethodsDec  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON ID . EQ exp   (rule 83)

    EQ  	shift, and go to state 183



state 181

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    MethodsDec  ->  FUNCTION ID LPAREN TypeFields RPAREN EQ exp .   (rule 82)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 82 (MethodsDec)



state 182

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    MethodsDec  ->  FUNCTION ID LPAREN RPAREN COLON ID EQ exp .   (rule 81)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 81 (MethodsDec)



state 183

    MethodsDec  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ . exp   (rule 83)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 184
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 184

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    MethodsDec  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ exp .   (rule 83)

    PLUS	shift, and go to state 35
    MINUS	shift, and go to state 36
    TIMES	shift, and go to state 37
    DIVIDE	shift, and go to state 38
    EQ  	shift, and go to state 39
    NEQ 	shift, and go to state 40
    LT  	shift, and go to state 41
    LE  	shift, and go to state 42
    GT  	shift, and go to state 43
    GE  	shift, and go to state 44
    AND 	shift, and go to state 45
    OR  	shift, and go to state 46

    $default	reduce using rule 83 (MethodsDec)



state 185

    $   	go to state 186



state 186

    $   	go to state 187



state 187

    $default	accept
